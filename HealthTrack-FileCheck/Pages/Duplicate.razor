
@page "/duplicate"


@using HealthTrack_FileCheck.Data
@using Solution.Data
@inject DuplicateService duplicateService;

<PageTitle>Duplicate Checker</PageTitle>


@if (error)
{
    <p style="color:red"> @errorString</p>
}

<p> Please copy directory to scan, as modern browsers don't like getting whole folders with file input, which is sensible, but boring</p>
<input type="text" @bind="@directory" />

@if (!scanning)
{
    <button class="btn btn-primary" @onclick="@(async () => await ReadFilesAsync())">Scan For Duplicates</button>
}

@if (duplicates is not null)
{
    foreach (DuplicateGroup duplicateGroup in duplicates)
    {
        @if (duplicateGroup.Duplicates is not null)
        {
            <h3> Duplicate files by @duplicateGroup.DuplicateType.ToString() </h3>
            @foreach (var duplicateFile in duplicateGroup.Duplicates)
            {
                <p>@duplicateFile</p>
            }
        }
      
    }
}

@code {
    private string directory = "";
    bool scanning = false;

    bool error = false;
    string errorString = "";

    IEnumerable<DuplicateGroup>? duplicates;

    private async Task ReadFilesAsync()
    {
        try
        {
            scanning = true;
            StateHasChanged();
            var duplicatesReturn = await duplicateService.GetDuplicatesAsync(directory);

            duplicates = duplicatesReturn;
        }
        catch (Exception ex)
        {
            //would be replacted with a proper error handling system in the future.
            error = true;
            errorString = ex.Message;
        }

        scanning = false;
    }
}